{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","React","memo","total","perPage","currentPage","onPageChange","pages","Math","ceil","className","classNames","disabled","href","onClick","Array","map","_","i","active","random","items","from","to","numbers","n","push","getNumbers","firstItems","slice","App","useState","setPerPage","setCurrentPage","visibleItems","setVisibleItems","useEffect","newItems","lastItem","id","value","onChange","event","target","htmlFor","length","page","item","ReactDOM","render","document","getElementById"],"mappings":"kOAUaA,EAA8BC,IAAMC,MAC/C,YAKO,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAQC,KAAKC,KAAKN,EAAQC,GAEhC,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBP,IAFd,SAKE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBAAc,OACdC,QAAS,kBAAMR,EAAaD,EAAc,IAL5C,oBAWD,YAAI,IAAIU,MAAMR,IAAQS,KAAI,SAACC,EAAGC,GAAJ,OACzB,oBAEER,UAAWC,IACT,YACA,CAAEQ,OAAQd,IAAgBa,EAAI,IAJlC,SAOE,mBACE,UAAQ,WACRR,UAAU,YACVG,KAAI,WAAMK,EAAI,GACdJ,QAAS,kBAAMR,EAAaY,EAAI,IAJlC,SAMGA,EAAI,KAZFV,KAAKY,aAiBd,oBAAIV,UAAWC,IACb,YACA,CAAEC,SAAUP,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAc,QACdC,QAAS,kBAAMR,EAAaD,EAAc,IAL5C,0BCxDV,IAAMgB,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IACzBX,KAAI,SAAAS,GAAC,qBAAYA,MACdG,EAAaP,EAAMQ,MAAM,EAAG,GAErBC,EAAU,WACrB,MAA8BC,mBAAS,GAAvC,mBAAO3B,EAAP,KAAgB4B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAO1B,EAAP,KAAoB4B,EAApB,KACA,EAAwCF,mBAAmBH,GAA3D,mBAAOM,EAAP,KAAqBC,EAArB,KAcAC,qBAZ0B,WAKxB,IAJA,IAAMC,EAAW,GACXC,EAAWlC,EAAUC,EAGlBa,EAFSoB,EAAWlC,EAELc,EAAIoB,EAAUpB,GAAK,EACzCmB,EAASX,KAAKL,EAAMH,IAGtBiB,EAAgBE,KAGW,CAAChC,IAiB9B,OACE,sBAAKK,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWL,EADX,uBACqCD,EADrC,aAIA,sBAAKM,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR6B,GAAG,kBACH7B,UAAU,eACV8B,MAAOpC,EACPqC,SAxBW,SAACC,GACpB,IAAQF,EAAUE,EAAMC,OAAhBH,OAEHA,IAAUpC,IACb4B,GAAYQ,GACZP,EAAe,KAcX,UAOE,wBAAQO,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBlC,UAAU,qBAA3C,+BAKF,cAACV,EAAD,CACEG,MAAOkB,EAAMwB,OACbzC,QAASA,EACTC,YAAaA,EACbC,aAhDe,SAACwC,GAChBA,IAASzC,GACX4B,EAAea,MAiDf,6BACGZ,EAAalB,KAAI,SAAA+B,GAAI,OACpBA,GACE,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YE/ErBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c7273a98.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = React.memo(\n  ({\n    total,\n    perPage,\n    currentPage,\n    onPageChange,\n  }) => {\n    const pages = Math.ceil(total / perPage);\n\n    return (\n      <ul className=\"pagination\">\n        <li className={classNames(\n          'page-item',\n          { disabled: currentPage === 1 },\n        )}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled=\"true\"\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            «\n          </a>\n        </li>\n\n        {[...new Array(pages)].map((_, i) => (\n          <li\n            key={Math.random()}\n            className={classNames(\n              'page-item',\n              { active: currentPage === i + 1 },\n            )}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${i + 1}`}\n              onClick={() => onPageChange(i + 1)}\n            >\n              {i + 1}\n            </a>\n          </li>\n        ))}\n\n        <li className={classNames(\n          'page-item',\n          { disabled: currentPage === pages },\n        )}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled=\"false\"\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    );\n  },\n);\n","import { FC, useState, useEffect } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\nconst firstItems = items.slice(0, 5);\n\nexport const App: FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [visibleItems, setVisibleItems] = useState<string[]>(firstItems);\n\n  const checkVisibleItems = () => {\n    const newItems = [];\n    const lastItem = perPage * currentPage;\n    const firstItem = lastItem - perPage;\n\n    for (let i = firstItem; i < lastItem; i += 1) {\n      newItems.push(items[i]);\n    }\n\n    setVisibleItems(newItems);\n  };\n\n  useEffect(checkVisibleItems, [currentPage]);\n\n  const onPageChange = (page: number) => {\n    if (page !== currentPage) {\n      setCurrentPage(page);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (+value !== perPage) {\n      setPerPage(+value);\n      setCurrentPage(1);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items 1 - ${perPage} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handleChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          item && (\n            <li key={item} data-cy=\"item\">{item}</li>\n          )\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}